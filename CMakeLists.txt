# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include("CMake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Set up a more familiar Visual Studio configuration
# Override these options with -DCMAKE_OPTION=Value
#
# See: https://cmake.org/cmake/help/latest/command/set.html#set-cache-entry
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/DEBUG:FULL /INCREMENTAL:NO" CACHE STRING "")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/DEBUG:FULL /INCREMENTAL:NO" CACHE STRING "")
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "")
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>" CACHE STRING "")

project(AppInitHook
	VERSION
		0.1.0
)

# Check if we're compiling with MSVC
if(NOT MSVC)
	message(FATAL_ERROR "Non-MSVC compilers are not supported!")
endif()

# Flatten build hierarchy (see: https://stackoverflow.com/a/51320498/1806760)
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
	set(CMAKE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
else()
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	set(CMAKE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()

# Build the register_AppInitDLL to register AppInitDispatcher.dll
add_custom_target(register_AppInitDLLs
	COMMAND
		"${CMAKE_COMMAND}" --build "${PROJECT_BINARY_DIR}" --target AppInitDispatcher --config $<CONFIG>
    COMMAND
        "${CMAKE_COMMAND}" "-DAPPINITDISPATCHER_PATH=$<TARGET_FILE:AppInitDispatcher>" -DCMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P} -P "${CMAKE_CURRENT_SOURCE_DIR}/CMake/register_AppInitDLLs.cmake"
    SOURCES
        CMake/register_x64.reg.in
        CMake/register_x86.reg.in
)

# Create a skeleton private module
if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Private")
	file(
		COPY "${CMAKE_CURRENT_SOURCE_DIR}/CMake/cmake.toml"
		DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Private"
	)
	file(
		COPY "${CMAKE_CURRENT_SOURCE_DIR}/Modules/AppInitExampleModule/AppInitExampleModule.cpp"
		DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Private/MyPrivateModule"
	)
	file(RENAME
		"${CMAKE_CURRENT_SOURCE_DIR}/Private/MyPrivateModule/AppInitExampleModule.cpp"
		"${CMAKE_CURRENT_SOURCE_DIR}/Private/MyPrivateModule/MyPrivateModule.cpp"
	)
endif()

# Options
option(APPINITHOOK_PRIVATE_MODULES OFF)

# Libraries
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/Libraries")
else()
	set(CMAKE_FOLDER Libraries)
endif()
add_subdirectory(Libraries)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Modules
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/Modules")
else()
	set(CMAKE_FOLDER Modules)
endif()
add_subdirectory(Modules)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})


if(APPINITHOOK_PRIVATE_MODULES)
	# Private
	set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
	if(CMAKE_FOLDER)
		set(CMAKE_FOLDER "${CMAKE_FOLDER}/Private")
	else()
		set(CMAKE_FOLDER Private)
	endif()
	add_subdirectory(Private)
	set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

endif()


# Target TestLoader
set(CMKR_TARGET TestLoader)
set(TestLoader_SOURCES "")

list(APPEND TestLoader_SOURCES
	"TestLoader/TestLoader.cpp"
)

list(APPEND TestLoader_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${TestLoader_SOURCES})
add_executable(TestLoader)

if(TestLoader_SOURCES)
	target_sources(TestLoader PRIVATE ${TestLoader_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT TestLoader)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${TestLoader_SOURCES})

target_link_libraries(TestLoader PRIVATE
	ntdll
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)
