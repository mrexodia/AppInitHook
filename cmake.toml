[cmake]
version = "3.15"
cmkr-include = "CMake/cmkr.cmake"

[options]
APPINITHOOK_PRIVATE_MODULES = false

[conditions]
private = "APPINITHOOK_PRIVATE_MODULES"

[project]
name = "AppInitHook"
version = "0.1.0"
subdirs = ["Libraries", "Modules"]
private.subdirs = ["Private"]
cmake-before = """
# Set up a more familiar Visual Studio configuration
# Override these options with -DCMAKE_OPTION=Value
#
# See: https://cmake.org/cmake/help/latest/command/set.html#set-cache-entry
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/DEBUG:FULL /INCREMENTAL:NO" CACHE STRING "")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/DEBUG:FULL /INCREMENTAL:NO" CACHE STRING "")
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "")
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>" CACHE STRING "")
"""
cmake-after = """
# Check if we're compiling with MSVC
if(NOT MSVC)
	message(FATAL_ERROR "Non-MSVC compilers are not supported!")
endif()

# Flatten build hierarchy (see: https://stackoverflow.com/a/51320498/1806760)
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
	set(CMAKE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/$<CONFIG>")
else()
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	set(CMAKE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()

# Build the register_AppInitDLL to register AppInitDispatcher.dll
add_custom_target(register_AppInitDLLs
	COMMAND
		\"${CMAKE_COMMAND}\" --build \"${PROJECT_BINARY_DIR}\" --target AppInitDispatcher --config $<CONFIG>
    COMMAND
        \"${CMAKE_COMMAND}\" \"-DAPPINITDISPATCHER_PATH=$<TARGET_FILE:AppInitDispatcher>\" -DCMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P} -P \"${CMAKE_CURRENT_SOURCE_DIR}/CMake/register_AppInitDLLs.cmake\"
    SOURCES
        CMake/register_x64.reg.in
        CMake/register_x86.reg.in
)

# Create a skeleton private module
if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Private")
	file(
		COPY "${CMAKE_CURRENT_SOURCE_DIR}/CMake/cmake.toml"
		DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Private"
	)
	file(
		COPY "${CMAKE_CURRENT_SOURCE_DIR}/Modules/AppInitExampleModule/AppInitExampleModule.cpp"
		DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Private/MyPrivateModule"
	)
	file(RENAME
		"${CMAKE_CURRENT_SOURCE_DIR}/Private/MyPrivateModule/AppInitExampleModule.cpp"
		"${CMAKE_CURRENT_SOURCE_DIR}/Private/MyPrivateModule/MyPrivateModule.cpp"
	)
endif()
"""

[target.TestLoader]
type = "executable"
sources = ["TestLoader/*.cpp", "TestLoader/*.hpp"]
link-libraries = ["ntdll"]